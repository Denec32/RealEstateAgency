@using RealEstateAgencyService.ViewModels
@using System.Globalization
@{
    ViewData["Title"] = "Главная страница";
    Layout = "_LayoutMap";
    int counter = 1;
}

@model List<ListingModel>;

<script src="https://code.jquery.com/jquery-3.4.0.js"></script>

<div class="input-group shadow-none">
    <input type="search" class="form-control shadow-none rounded-0 border-light" id = "findAddress" placeholder="Введите адрес..." aria-label="Search" aria-describedby="search-addon" />
    <button class="btn btn-light shadow-none rounded-0 dropdown-toggle filter" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
        Комнат
    </button>
    <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
        <li><button class="btn btn-light dropdown-item">1</button></li>
        <li><button class="btn btn-light dropdown-item">2</button></li>
        <li><button class="btn btn-light dropdown-item">3</button></li>
        <li><button class="btn btn-light dropdown-item">4</button></li>
        <li><button class="btn btn-light dropdown-item">5+</button></li>
    </ul>    
    <button class="btn btn-light shadow-none rounded-0 dropdown-toggle filter" type="button" id="dropdownMenuButton2" data-bs-toggle="dropdown" aria-expanded="false">
        Стоимость
    </button>
    <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton2">
        <li><input type="number" class="form-control" min="1" placeholder="от" /></li>
        <li><input type="number" class="form-control" min="1" placeholder="до" /></li>
    </ul> 
    
    <button type="button" class="btn btn-dark shadow-none rounded-0" onclick = "centerMap()">Поиск</button>
</div>
<div id="gmap" style="width:100%; height:85vh;" class="container-fluid"></div>
<div class="listings-list" hidden>
    <div class="card" id="place-here"></div>
</div>
<button class="close-button btn btn-danger border-0 rounded-0" onclick = "hideDiv()" hidden><span class="close">&times;</span></button>

@foreach (var item in Model)
{
    <div class = "card listing" hidden>
        <div class="card-body">
            <div class="slideshow-container">
                @foreach (var photo in item.RealEstatePhotos)
                {
                    <div class="mySlides">
                        <div class="numbertext rounded border border-light">@counter / @item.RealEstatePhotos.Count</div>
                        <img src="data:image;base64,@Convert.ToBase64String(photo.Photo)" style="width: 100%; height: 200px; object-fit: contain;">
                    </div>
                counter++;
                }   
                <a class="prev" onclick="plusSlides(-1)">❮</a>
                <a class="next" onclick="plusSlides(1)">❯</a>
            </div>
            @{
                counter = 1;
            }
            <h5 class="card-title price me-auto p-2">@item.Listing.Price</h5>
            <p class="card-text">@item.Listing.Rooms-комн. квартира, @item.Listing.Space м², @item.Listing.Floor этаж</p>
            <p class="card-text address">@item.Listing.City, @item.Listing.Street, @item.Listing.BuildingNumber</p>
            <p class="card-text"><small class="text-muted">Дата добавления: @item.Listing.Created.ToString("dd MMM yyyy", new CultureInfo("ru-RU"))</small></p>
            <a class = "btn btn-primary card-text" href = "~/Home/Listing/@item.Listing.Id">Открыть объявление</a>
        </div>
    </div>
}

<script>

    //Объявление переменных
    var api = '9f39ce43-5ffb-4983-afbd-9543d1332601';
    var map;
    var address = "Иваново";
    var apiString;

    initKeyBindings();
    formatCurrency();

    function initMap(){
        apiString = 'https://geocode-maps.yandex.ru/1.x/?apikey='+api+'&format=json&geocode=' + address;
        let response = fetch(apiString).then((response) => {
        return response.json(); })
        .then( (data) => {
            let str = data.response.GeoObjectCollection.featureMember[0].GeoObject.Point.pos + '';
            let myArray = str.split(" ");
            let ln = parseFloat(myArray[0]);
            let la = parseFloat(myArray[1]);

            map = new google.maps.Map(document.getElementById('gmap'), {        
                zoom: 12,
                center: {lat: la, lng: ln}
            });
            map.addListener("idle", () => {
                let listings = document.getElementsByClassName("address");
    
                for (let step = 0; step < listings.length; step++) {
                    address = listings[step].innerHTML;
                    address = address.replace(/\s/g, '');
                    apiString = 'https://geocode-maps.yandex.ru/1.x/?apikey='+api+'&format=json&geocode=' + address;
                    let response = fetch(apiString).then((response) => {
                        return response.json(); 
                    })
                    .then( (data) => {
                        let str = data.response.GeoObjectCollection.featureMember[0].GeoObject.Point.pos + '';
                        let myArray = str.split(" ");
                        let ln = parseFloat(myArray[0]);
                        let la = parseFloat(myArray[1]);

                        var icon = {
                            url: "https://i.imgur.com/jMQ2JIh.png",
                            scaledSize: new google.maps.Size(32, 36), 
                        };

                        var marker = new google.maps.Marker({
                            position:  {lat: la, lng: ln},
                            icon: icon
                        });
                        marker.setMap(map);

                        var contentString = document.getElementsByClassName("listing")[step].innerHTML;
                        var infowindow = new google.maps.InfoWindow({
                            content: contentString
                        });

                        google.maps.event.addListener(marker, 'click', function() {
                            let x = document.getElementById('place-here');
                            x.innerHTML = contentString;
                            showSlides(slideIndex);
                            showDiv();
                        });
                    })
                    .then(data => obj = data);
                }   
            });
        })
        .then(data => obj = data);
    }

    function showDiv(){
        let listings = document.getElementsByClassName('listings-list')[0];  
        let closeButton = document.getElementsByClassName('close-button')[0];  
        listings.hidden = false;
        closeButton.hidden = false;
        let pos = -330;
        let id;
        clearInterval(id);
        id = setInterval(frame, 1);
        function frame() {
            if (pos == 0) {
                clearInterval(id);
            } else {
                pos+=5; 
                listings.style.left = pos + 'px'; 
                let bpos = pos + 300;
                closeButton.style.left = bpos + 'px';
            }
        }
    }

    function hideDiv(){
        let x = document.getElementsByClassName('listings-list')[0];
        let y = document.getElementsByClassName('close-button')[0];

        let pos = 0;
        let id;
        clearInterval(id);
        id = setInterval(frame, 1);
        function frame() {
            if (pos == -330) {
                clearInterval(id);
                x.hidden = true;  
                y.hidden = true; 
            } else {
                pos-=5; 
                x.style.left = pos + 'px'; 
                let bpos = pos + 300;
                y.style.left = bpos + 'px';
            }
        } 
    }

    function centerMap(){
        address = document.getElementById('findAddress').value;
        address = address.replace(/\s/g, '');
        apiString = 'https://geocode-maps.yandex.ru/1.x/?apikey='+api+'&format=json&geocode=' + address;
            let response = fetch(apiString).then((response) => {
            return response.json(); })
            .then( (data) => {
                let str = data.response.GeoObjectCollection.featureMember[0].GeoObject.Point.pos + '';
                const myArray = str.split(" ");
                ln = parseFloat(myArray[0]);         
                la = parseFloat(myArray[1]);
                console.log(ln);
                console.log(la);
                map.setCenter({lat: la,  lng: ln});
                map.setZoom(12);
            })
            .then(data => obj = data);
    }

    //Инициализация карты
    async function createMap(str) {
        let myArray = str.split(" ");
        let ln = parseFloat(myArray[0]);
        let la = parseFloat(myArray[1]);

        map = await new google.maps.Map(document.getElementById('gmap'), {        
            zoom: 12,
            center: {lat: la, lng: ln}
        });
    }

    function formatCurrency(){
        let rubleRussia = Intl.NumberFormat("ru-RU", {
            style: "currency",
            currency: "RUB",
            minimumFractionDigits: 0,
            maximumFractionDigits: 0,
        });

        const price = document.getElementsByClassName("price");

        for (let step = 0; step < price.length; step++) {
            price[step].innerHTML = rubleRussia.format(price[step].innerHTML.slice(0, -5));
        }  
    }


    function showRoomCount(){
        let x = document.getElementsByClassName('room-count')[0];
        if(x.style.display == "block"){
            x.style.display = "none";
        }
        else{
            x.style.display = "block"
        }
    }

    function showPriceRange(){
        let x = document.getElementsByClassName('price-range')[0];
        if(x.style.display == "block"){
            x.style.display = "none";
        }
        else{
            x.style.display = "block"
        }
    }

    //Поиск при нажатии Enter
    function initKeyBindings(){  
        $("input").on("keydown",function search(e) {
            if(e.keyCode == 13) {
                centerMap();
            }
        });
    }

    let slideIndex = 1;

    function plusSlides(n) {
        showSlides(slideIndex += n);
    }

    function currentSlide(n) {
        showSlides(slideIndex = n);
    }
    
    function showSlides(n) {
        let slides = document.querySelector('.listings-list').querySelector('.card').querySelector('.slideshow-container').querySelectorAll(".mySlides");
        if (n > slides.length) {
            slideIndex = 1
        }    
        if (n < 1) {
            slideIndex = slides.length
        }
        for (let i = 0; i < slides.length; i++) {
            slides[i].style.display = "none";  
        }

        slides[slideIndex-1].style.display = "block";
    }
</script>
<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDVxydMVf1Hr-oNZkBCgPGFp-JXKgAFOQg&callback=initMap"></script>

